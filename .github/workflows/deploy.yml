name: Deploy 2048 Game to AWS ECS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
  TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}
  TF_VAR_subdomain: ${{ secrets.SUBDOMAIN }}
  TF_VAR_vpc_id: ${{ secrets.VPC_ID }}
  TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_certificate_arn: ${{ secrets.CERTIFICATE_ARN }}
  TF_VAR_hosted_zone_id: ${{ secrets.HOSTED_ZONE_ID }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Run tests
      run: |
        echo "Running tests..."
        npm test
        echo "Tests completed successfully"

  infrastructure:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'destroy') && github.event.inputs.action != 'destroy'
    outputs:
      ecr_repository_url: ${{ steps.terraform.outputs.ecr_repository_url }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Debug Secrets
      run: |
        echo "Checking required secrets..."
        echo "DOMAIN_NAME: ${{ secrets.DOMAIN_NAME }}"
        echo "VPC_ID: ${{ secrets.VPC_ID }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./terraform

    - name: Import existing resources
      run: |
        # Import existing resources if they exist
        terraform import aws_iam_role.ecs_task_execution_role ecsTaskExecutionRole-2048 || true
        terraform import aws_ecr_repository.game_repo 2048-game || true
        terraform import aws_ecs_cluster.game_cluster 2048-cluster || true
        terraform import aws_cloudwatch_log_group.ecs_log_group /ecs/2048-task-def || true
        
        # Get ALB ARN and import
        ALB_ARN=$(aws elbv2 describe-load-balancers --names 2048-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null || echo "")
        if [ "$ALB_ARN" != "" ] && [ "$ALB_ARN" != "None" ]; then
          terraform import aws_lb.main $ALB_ARN || true
        fi
        
        # Get Target Group ARN and import
        TG_ARN=$(aws elbv2 describe-target-groups --names 2048-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null || echo "")
        if [ "$TG_ARN" != "" ] && [ "$TG_ARN" != "None" ]; then
          terraform import aws_lb_target_group.app $TG_ARN || true
        fi
        
        # Import Route53 record if it exists (try both root and subdomain)
        terraform import aws_route53_record.game ${{ secrets.HOSTED_ZONE_ID }}_play-2048.fozdigitalz.com_A || true
        terraform import aws_route53_record.game ${{ secrets.HOSTED_ZONE_ID }}_fozdigitalz.com_A || true
      working-directory: ./terraform
      continue-on-error: true

    - name: Terraform Plan
      env:
        TF_LOG: DEBUG
      run: |
        echo "Planning deployment..."
        terraform plan -detailed-exitcode -out=tfplan || code=$?
        if [ "$code" -eq 1 ]; then
         echo "Terraform plan failed"
         exit 1
        elif [ "$code" -eq 2 ]; then
         echo "Terraform plan succeeded with changes"
        else
         echo "Terraform plan succeede with no changes"
        fi
      working-directory: ./terraform
    


    - name: Terraform Apply
      id: terraform
      run: |
        terraform apply -auto-approve tfplan
        ECR_URL=$(terraform output -raw ecr_repository_url)
        echo "ecr_repository_url=$ECR_URL" >> $GITHUB_OUTPUT
      working-directory: ./terraform

  destroy:
    needs: test
    runs-on: ubuntu-latest
    if: (github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, 'destroy')) || github.event.inputs.action == 'destroy'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ./terraform

  build-and-deploy:
    needs: infrastructure
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, 'destroy') && github.event.inputs.action != 'destroy'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/2048-game:$IMAGE_TAG .
        docker push $ECR_REGISTRY/2048-game:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/2048-game:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS service with new image
      run: |
        # Force new deployment with updated task definition
        aws ecs update-service \
          --cluster 2048-cluster \
          --service 2048-service \
          --force-new-deployment