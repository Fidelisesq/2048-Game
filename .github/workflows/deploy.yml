name: Deploy 2048 Game to S3 + CloudFront

on:
  push:
    branches: [ cloudfront-hosting ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose action'
        required: true
        default: 'deploy'
        type: choice
        options:
        - deploy
        - destroy

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Run tests
      run: npm test

  infrastructure:
    needs: test
    runs-on: ubuntu-latest
    if: (github.event.inputs.action != 'destroy' || github.event_name == 'push') && !contains(github.event.head_commit.message, 'destroy')
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Create terraform.tfvars
      run: |
        cat > terraform/terraform.tfvars << EOF
        aws_region = "${{ secrets.AWS_REGION }}"
        domain_name = "${{ secrets.DOMAIN_NAME }}"
        subdomain = "${{ secrets.SUBDOMAIN }}"
        hosted_zone_id = "${{ secrets.HOSTED_ZONE_ID }}"
        EOF
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
    
    - name: Terraform Plan
      run: terraform plan -out=tfplan
      working-directory: ./terraform
    
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: ./terraform
    
    - name: Get Terraform Outputs
      id: terraform-outputs
      run: |
        echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
      working-directory: ./terraform
    
    outputs:
      s3_bucket: ${{ steps.terraform-outputs.outputs.s3_bucket }}
      cloudfront_id: ${{ steps.terraform-outputs.outputs.cloudfront_id }}

  deploy:
    needs: infrastructure
    runs-on: ubuntu-latest
    if: (github.event.inputs.action != 'destroy' || github.event_name == 'push') && !contains(github.event.head_commit.message, 'destroy')
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Upload files to S3
      run: |
        aws s3 sync . s3://${{ needs.infrastructure.outputs.s3_bucket }}/ \
          --exclude ".git/*" \
          --exclude ".github/*" \
          --exclude "terraform/*" \
          --exclude "Dockerfile" \
          --exclude "*.md" \
          --exclude "package.json" \
          --exclude "test.js" \
          --exclude "node_modules/*"
    
    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ needs.infrastructure.outputs.cloudfront_id }} \
          --paths "/*"

  destroy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy' || contains(github.event.head_commit.message, 'destroy')
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Create terraform.tfvars
      run: |
        cat > terraform/terraform.tfvars << EOF
        aws_region = "${{ secrets.AWS_REGION }}"
        domain_name = "${{ secrets.DOMAIN_NAME }}"
        subdomain = "${{ secrets.SUBDOMAIN }}"
        hosted_zone_id = "${{ secrets.HOSTED_ZONE_ID }}"
        EOF
    
    - name: Terraform Init
      run: terraform init
      working-directory: ./terraform
    
    - name: Terraform Destroy
      run: terraform destroy -auto-approve
      working-directory: ./terraform